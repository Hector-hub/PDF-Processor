"""
Ejemplo de extracci√≥n de campos espec√≠ficos con agentic-doc
Demuestra c√≥mo usar modelos Pydantic para extraer datos estructurados
"""

import logging
import os
from pathlib import Path
from typing import Optional, List

# Agregar el directorio padre al path para importar config
import sys
sys.path.append(str(Path(__file__).parent.parent))

from config import Config

def ejemplo_extraccion_factura():
    """Extrae campos espec√≠ficos de una factura usando un modelo Pydantic"""
    
    # Configurar logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    try:
        # Validar configuraci√≥n
        Config.validate()
        
        # Configurar variables de entorno
        if Config.VISION_AGENT_API_KEY:
            os.environ['VISION_AGENT_API_KEY'] = Config.VISION_AGENT_API_KEY
        
        # Importar librer√≠as necesarias
        from pydantic import BaseModel, Field
        from agentic_doc.parse import parse
        
        logger.info("‚úÖ Librer√≠as importadas correctamente")
        logger.info("üßæ Extrayendo campos espec√≠ficos de factura...")
        
        # Definir modelo de datos para factura
        class DatosFactura(BaseModel):
            numero_factura: Optional[str] = Field(description="N√∫mero de la factura o identificador √∫nico")
            fecha_emision: Optional[str] = Field(description="Fecha de emisi√≥n de la factura")
            empresa_emisora: Optional[str] = Field(description="Nombre de la empresa que emite la factura")
            cliente_nombre: Optional[str] = Field(description="Nombre del cliente o destinatario")
            subtotal: Optional[float] = Field(description="Subtotal antes de impuestos")
            impuestos: Optional[float] = Field(description="Monto total de impuestos")
            total: Optional[float] = Field(description="Monto total a pagar")
            direccion_cliente: Optional[str] = Field(description="Direcci√≥n del cliente")
        
        # URL de documento de ejemplo (puedes cambiar por tu documento)
        documento_url = "https://www.rbcroyalbank.com/banking-services/_assets-custom/pdf/eStatement.pdf"
        
        logger.info(f"üìÑ Procesando documento: {documento_url}")
        logger.info("üîç Buscando campos espec√≠ficos...")
        
        # Procesar documento con modelo de extracci√≥n
        resultados = parse(
            documento_url,
            extraction_model=DatosFactura
        )
        
        resultado = resultados[0]
        campos_extraidos = resultado.extraction
        metadatos = resultado.extraction_metadata
        
        logger.info("‚úÖ Extracci√≥n completada")
        
        # Mostrar campos extra√≠dos con confianza
        logger.info("\nüìä CAMPOS EXTRA√çDOS:")
        logger.info("=" * 50)
        
        for campo, valor in campos_extraidos.dict().items():
            if valor is not None:
                confianza = getattr(metadatos, campo).confidence if hasattr(metadatos, campo) else "N/A"
                logger.info(f"üìã {campo.replace('_', ' ').title()}: {valor}")
                logger.info(f"   üéØ Confianza: {confianza}")
            else:
                logger.info(f"‚ùå {campo.replace('_', ' ').title()}: No encontrado")
        
        logger.info("\n" + "=" * 50)
        
        return campos_extraidos, metadatos
        
    except ImportError:
        logger.error("‚ùå agentic-doc no est√° instalado.")
        logger.info("üí° Ejecuta: pip install agentic-doc")
    except ValueError as e:
        logger.error(f"‚ùå Error de configuraci√≥n: {e}")
        logger.info("üí° Revisa tu archivo .env y configura VISION_AGENT_API_KEY")
    except Exception as e:
        logger.error(f"‚ùå Error durante la extracci√≥n: {e}")
        return None, None

def ejemplo_extraccion_nomina():
    """Extrae campos de una n√≥mina de empleado"""
    
    logger = logging.getLogger(__name__)
    
    try:
        from pydantic import BaseModel, Field
        from agentic_doc.parse import parse
        
        logger.info("\nüí∞ Extrayendo campos de n√≥mina...")
        
        # Modelo para datos de n√≥mina
        class DatosNomina(BaseModel):
            nombre_empleado: Optional[str] = Field(description="Nombre completo del empleado")
            numero_empleado: Optional[str] = Field(description="N√∫mero o ID del empleado")
            periodo_pago: Optional[str] = Field(description="Per√≠odo de pago (fechas)")
            salario_bruto: Optional[float] = Field(description="Salario bruto antes de deducciones")
            deducciones_totales: Optional[float] = Field(description="Total de deducciones")
            salario_neto: Optional[float] = Field(description="Salario neto despu√©s de deducciones")
            horas_trabajadas: Optional[float] = Field(description="Total de horas trabajadas")
        
        logger.info("üìù Modelo de n√≥mina definido")
        logger.info("üí° Para usar con tu documento:")
        logger.info("```python")
        logger.info("resultados = parse('nomina.pdf', extraction_model=DatosNomina)")
        logger.info("datos = resultados[0].extraction")
        logger.info("print(f'Empleado: {datos.nombre_empleado}')")
        logger.info("print(f'Salario neto: ${datos.salario_neto}')")
        logger.info("```")
        
    except Exception as e:
        logger.error(f"‚ùå Error en ejemplo de n√≥mina: {e}")

def ejemplo_extraccion_contrato():
    """Extrae campos importantes de un contrato"""
    
    logger = logging.getLogger(__name__)
    
    try:
        from pydantic import BaseModel, Field
        
        logger.info("\nüìÑ Modelo para contratos:")
        
        # Modelo para contratos
        class DatosContrato(BaseModel):
            partes_contrato: Optional[List[str]] = Field(description="Nombres de las partes del contrato")
            fecha_firma: Optional[str] = Field(description="Fecha de firma del contrato")
            vigencia_inicio: Optional[str] = Field(description="Fecha de inicio de vigencia")
            vigencia_fin: Optional[str] = Field(description="Fecha de fin de vigencia")
            monto_contrato: Optional[float] = Field(description="Valor monetario del contrato")
            objeto_contrato: Optional[str] = Field(description="Objeto o prop√≥sito principal del contrato")
            penalizaciones: Optional[str] = Field(description="Cl√°usulas de penalizaciones")
        
        logger.info("üìã Modelo de contrato definido")
        logger.info("üí° √ötil para extraer informaci√≥n legal importante")
        
    except Exception as e:
        logger.error(f"‚ùå Error en ejemplo de contrato: {e}")

if __name__ == "__main__":
    # Ejecutar ejemplo principal
    campos, metadatos = ejemplo_extraccion_factura()
    
    # Mostrar ejemplos adicionales
    ejemplo_extraccion_nomina()
    ejemplo_extraccion_contrato()
    
    # Consejos finales
    logger = logging.getLogger(__name__)
    logger.info("\nüí° CONSEJOS PARA EXTRACCI√ìN DE CAMPOS:")
    logger.info("1. Define descripciones claras en los Field()")
    logger.info("2. Usa tipos Optional para campos que pueden no existir")
    logger.info("3. Revisa la confianza de cada campo extra√≠do")
    logger.info("4. Prueba con diferentes documentos para validar el modelo")
    logger.info("5. Ajusta las descripciones seg√∫n el rendimiento")